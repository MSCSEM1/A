1. Find employees having designation as either ‘manager’ or ‘floor supervisor’.
> db.Employee.find({
...   Designation: { $in: ["Manager", "Floor Supervisor"] }
... });
{ "_id" : ObjectId("66b312df2ac2ae11b0bf19af"), "EmployeeID" : "E004", "FirstName" : "Dinesh", "LastName" : "Barve", "Email" : "dbarve@example.com", "PhoneNo" : "753-982-2345", "Address" : { "HouseNo" : "78", "Street" : "Oak St", "City" : "Pune", "State" : "MH", "Country" : "India", "PinCode" : "411030" }, "Salary" : 54000, "Designation" : "Manager", "Experience" : 4, "DateOfJoining" : ISODate("2019-11-30T00:00:00Z"), "Birthdate" : ISODate("1988-03-20T00:00:00Z") }

2. Find an employee whose name ends with "a" and print the output in json format.
> db.Employee.find({
...   $or: [
...     { FirstName: { $regex: /a$/i } },
...     { LastName: { $regex: /a$/i } }
...   ]
... }).pretty();
{
	"_id" : ObjectId("66b312df2ac2ae11b0bf19b0"),
	"EmployeeID" : "E005",
	"FirstName" : "Eva",
	"LastName" : "Davis",
	"Email" : "eva.davis@example.com",
	"PhoneNo" : "555-3456",
	"Address" : {
		"HouseNo" : "9",
		"Street" : "Birch Rd",
		"City" : "Springfield",
		"State" : "IL",
		"Country" : "USA",
		"PinCode" : "62705"
	},
	"Salary" : 73000,
	"Designation" : "Project Lead",
	"Experience" : 7,
	"DateOfJoining" : ISODate("2018-05-16T00:00:00Z"),
	"Birthdate" : ISODate("1982-11-30T00:00:00Z")
}
{
	"_id" : ObjectId("66d7e9b8b62bae83f320af7f"),
	"EmployeeID" : "E001",
	"FirstName" : "Suchitra",
	"LastName" : "Yadav",
	"Email" : "suchitra@example.com",
	"PhoneNo" : "860-542-1234",
	"Address" : {
		"HouseNo" : "1358A",
		"Street" : "Bajirao Road",
		"City" : "Pune",
		"State" : "MH",
		"Country" : "India",
		"PinCode" : "411030"
	},
	"Salary" : 75000,
	"Designation" : "Sales Manager",
	"Experience" : 3,
	"DateOfJoining" : ISODate("2024-04-23T00:00:00Z"),
	"Birthdate" : ISODate("2004-09-15T00:00:00Z")
}

3. Display the name of an employee whose salary is greater than 70000 using a MongoDB cursor.
> db.Employee.find({ Salary: { $gt: 70000 } }).forEach(function(doc) {
...   print(doc.FirstName + " " + doc.LastName);
... });
Eva Davis
Suchitra Yadav
Carol Williams

4. Sort the employees in the descending order of their designation.

> db.Employee.find().sort({ Designation: -1 }).pretty();
{
	"_id" : ObjectId("66d7e9b8b62bae83f320af80"),
	"EmployeeID" : "E002",
	"FirstName" : "Satish",
	"LastName" : "Bhor",
	"Email" : "satish@example.com",
	"PhoneNo" : "111-555-5678",
	"Address" : {
		"HouseNo" : "25",
		"Street" : "Ganeshwadi",
		"City" : "Manchar",
		"State" : "MH",
		"Country" : "India",
		"PinCode" : "400200"
	},
	"Salary" : 68000,
	"Designation" : "Software Engineer",
	"Experience" : 2,
	"DateOfJoining" : ISODate("2023-01-12T00:00:00Z"),
	"Birthdate" : ISODate("2003-12-22T00:00:00Z")
}
{
	"_id" : ObjectId("66d7e9b8b62bae83f320af7f"),
	"EmployeeID" : "E001",
	"FirstName" : "Suchitra",
	"LastName" : "Yadav",
	"Email" : "suchitra@example.com",
	"PhoneNo" : "860-542-1234",
	"Address" : {
		"HouseNo" : "1358A",
		"Street" : "Bajirao Road",
		"City" : "Pune",
		"State" : "MH",
		"Country" : "India",
		"PinCode" : "411030"
	},
	"Salary" : 75000,
	"Designation" : "Sales Manager",
	"Experience" : 3,
	"DateOfJoining" : ISODate("2024-04-23T00:00:00Z"),
	"Birthdate" : ISODate("2004-09-15T00:00:00Z")
}
{
	"_id" : ObjectId("66b312df2ac2ae11b0bf19b0"),
	"EmployeeID" : "E005",
	"FirstName" : "Eva",
	"LastName" : "Davis",
	"Email" : "eva.davis@example.com",
	"PhoneNo" : "555-3456",
	"Address" : {
		"HouseNo" : "9",
		"Street" : "Birch Rd",
		"City" : "Springfield",
		"State" : "IL",
		"Country" : "USA",
		"PinCode" : "62705"
	},
	"Salary" : 73000,
	"Designation" : "Project Lead",
	"Experience" : 7,
	"DateOfJoining" : ISODate("2018-05-16T00:00:00Z"),
	"Birthdate" : ISODate("1982-11-30T00:00:00Z")
}
{
	"_id" : ObjectId("66b312df2ac2ae11b0bf19af"),
	"EmployeeID" : "E004",
	"FirstName" : "Dinesh",
	"LastName" : "Barve",
	"Email" : "dbarve@example.com",
	"PhoneNo" : "753-982-2345",
	"Address" : {
		"HouseNo" : "78",
		"Street" : "Oak St",
		"City" : "Pune",
		"State" : "MH",
		"Country" : "India",
		"PinCode" : "411030"
	},
	"Salary" : 54000,
	"Designation" : "Manager",
	"Experience" : 4,
	"DateOfJoining" : ISODate("2019-11-30T00:00:00Z"),
	"Birthdate" : ISODate("1988-03-20T00:00:00Z")
}
{
	"_id" : ObjectId("66d7e9b8b62bae83f320af81"),
	"EmployeeID" : "E003",
	"FirstName" : "Carol",
	"LastName" : "Williams",
	"Email" : "carol.williams@example.com",
	"PhoneNo" : "918-235-8765",
	"Address" : {
		"HouseNo" : "42",
		"Street" : "Pine St",
		"City" : "Springfield",
		"State" : "IL",
		"Country" : "USA",
		"PinCode" : "62703"
	},
	"Salary" : 72000,
	"Designation" : "Data Analyst",
	"Experience" : 6,
	"DateOfJoining" : ISODate("2017-08-09T00:00:00Z"),
	"Birthdate" : ISODate("1983-04-10T00:00:00Z")
}

5. Count the total number of employees in a collection.
> db.Employee.count();
5

6. Calculate the sum of the total amount paid for all the transaction documents.
> db.Transaction.aggregate([
...   {
...     $group: {
...       _id: null,
...       totalAmountPaid: { $sum: "$Payment.TotalAmountPaid" }
...     }
...   }
... ]);
{ "_id" : null, "totalAmountPaid" : 114500 }

7. Calculate the sum of the total amount paid for each payment type.
> db.Transaction.aggregate([
...   {
...     $group: {
...        _id:"$Payment.TypeOfPayment",
...        totalAmountPaid: { $sum: "$Payment.TotalAmountPaid" }
...     }
...   }
...  ]);
{ "_id" : "Cash", "totalAmountPaid" : 15500 }
{ "_id" : "Credit", "totalAmountPaid" : 67000 }
{ "_id" : "Debit", "totalAmountPaid" : 32000 }

8. Find the transaction id of the latest transaction.
> db.Transaction.aggregate([
...   {
...     $sort: { TransactionDate: -1 } 
...   },
...   {
...     $limit: 1 
...   },
...   {
...     $project: { TransactionId: 1, _id: 0 }
...   }
... ]);
{ "TransactionId" : "205" }

9. Find designation of employees who have made transaction of amount
greater than Rs. 500.
> db.Transaction.aggregate([
...     {
...         $lookup: {
...             from: "Employee",
...             localField: "Name",
...             foreignField: "FirstName",
...             as: "employeeDetails"
...         }
...     },
...     {
...         $match: {
...             "TransactionDetails.Price": { $gt: 500 }
...         }
...     },
...     {
...         $project: {
...             "employeeDetails.FirstName": 1,
...             "employeeDetails.Designation": 1
...         }
...     },
...     {
...         $unwind: "$employeeDetails"
...     },
...     {
...         $group: {
...             _id: "$employeeDetails.Designation",
...             employees: { $addToSet: "$employeeDetails.FirstName" }
...         }
...     }
... ])
{ "_id" : "Sales Manager", "employees" : [ "Suchitra" ] }
{ "_id" : "Manager", "employees" : [ "Dinesh" ] }
{ "_id" : "Project Lead", "employees" : [ "Eva" ] }
{ "_id" : "Software Engineer", "employees" : [ "Satish" ] }
{ "_id" : "Data Analyst", "employees" : [ "Carol" ] }

10. Find the total quantity of a particular item sold using Map Reduce.
> db.Transaction.mapReduce(
...     function() {
...         emit(this.TransactionDetails.ItemName, 1);
...     },
...     function(key, values) {
...         return Array.sum(values);
...     },
...     {
...         out: "totalQuantityByItem"
...     }
... );
{
	"result" : "totalQuantityByItem",
	"timeMillis" : 40,
	"counts" : {
		"input" : 9,
		"emit" : 9,
		"reduce" : 0,
		"output" : 9
	},
	"ok" : 1
}
> db.totalQuantityByItem.find({ "_id": "Laptop" }).pretty();
{ "_id" : "Laptop", "value" : 1 }
> db.totalQuantityByItem.find({ "_id": "Desk Chair" }).pretty();
{ "_id" : "Desk Chair", "value" : 1 }

